.TH "iFaceRecognition/jni/RecogLib/ImageUtils.h" 3 "Sat Jun 14 2014" "Version 1.3" "iFaceRecognition@YuliWANG" \" -*- nroff -*-
.ad l
.nh
.SH NAME
iFaceRecognition/jni/RecogLib/ImageUtils.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <cv\&.h>\fP
.br
\fC#include <cxcore\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <termios\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <string>\fP
.br
\fC#include <iostream>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIMAGEUTILS_0_7_H_\fP"
.br
.ti -1c
.RI "#define \fBLOG\fP(fmt, args\&.\&.\&.)   do {printf(fmt, ## args); printf('\\n'); fflush(stdout);} while (0)"
.br
.ti -1c
.RI "#define \fBtrue\fP   (1)"
.br
.ti -1c
.RI "#define \fBfalse\fP   (0)"
.br
.ti -1c
.RI "#define \fBDEFAULT\fP(val)"
.br
.ti -1c
.RI "#define \fBDECLARE_TIMING\fP(s)   int64 timeStart_##s; int64 timeDiff_##s; int64 timeTally_##s = 0; int64 countTally_##s = 0; double timeMin_##s = DBL_MAX; double timeMax_##s = 0; int64 timeEnd_##s;"
.br
.ti -1c
.RI "#define \fBSTART_TIMING\fP(s)   timeStart_##s = cvGetTickCount()"
.br
.ti -1c
.RI "#define \fBSTOP_TIMING\fP(s)   do {    timeEnd_##s = cvGetTickCount(); timeDiff_##s = (timeEnd_##s - timeStart_##s); timeTally_##s += timeDiff_##s; countTally_##s++; timeMin_##s = MIN(timeMin_##s, timeDiff_##s); timeMax_##s = MAX(timeMax_##s, timeDiff_##s);    } while (0)"
.br
.ti -1c
.RI "#define \fBGET_TIMING\fP(s)   (double)(0\&.001 * ( (double)timeDiff_##s / (double)cvGetTickFrequency() ))"
.br
.ti -1c
.RI "#define \fBGET_MIN_TIMING\fP(s)   (double)(0\&.001 * ( (double)timeMin_##s / (double)cvGetTickFrequency() ))"
.br
.ti -1c
.RI "#define \fBGET_MAX_TIMING\fP(s)   (double)(0\&.001 * ( (double)timeMax_##s / (double)cvGetTickFrequency() ))"
.br
.ti -1c
.RI "#define \fBGET_AVERAGE_TIMING\fP(s)   (double)(countTally_##s ? 0\&.001 * ( (double)timeTally_##s / ((double)countTally_##s * cvGetTickFrequency()) ) : 0)"
.br
.ti -1c
.RI "#define \fBGET_TOTAL_TIMING\fP(s)   (double)(0\&.001 * ( (double)timeTally_##s / ((double)cvGetTickFrequency()) ))"
.br
.ti -1c
.RI "#define \fBGET_TIMING_COUNT\fP(s)   (int)(countTally_##s)"
.br
.ti -1c
.RI "#define \fBCLEAR_AVERAGE_TIMING\fP(s)   do {    timeTally_##s = 0; countTally_##s = 0;     } while (0)"
.br
.ti -1c
.RI "#define \fBSHOW_TIMING\fP(s, msg)   \fBLOG\fP('%s time:\\t %dms\\t (ave=%dms min=%dms max=%dms, across %d runs)\&.', msg, cvRound(\fBGET_TIMING\fP(s)), cvRound(\fBGET_AVERAGE_TIMING\fP(s)), cvRound(\fBGET_MIN_TIMING\fP(s)), cvRound(\fBGET_MAX_TIMING\fP(s)), \fBGET_TIMING_COUNT\fP(s) )"
.br
.ti -1c
.RI "#define \fBSHOW_TOTAL_TIMING\fP(s, msg)   \fBLOG\fP('%s total:\\t %dms\\t (ave=%dms min=%dms max=%dms, across %d runs)\&.', msg, cvRound(\fBGET_TOTAL_TIMING\fP(s)), cvRound(\fBGET_AVERAGE_TIMING\fP(s)), cvRound(\fBGET_MIN_TIMING\fP(s)), cvRound(\fBGET_MAX_TIMING\fP(s)), \fBGET_TIMING_COUNT\fP(s) )"
.br
.ti -1c
.RI "#define \fBAVERAGE_TIMING\fP(s)   \fBSHOW_TIMING\fP(s, #s)"
.br
.ti -1c
.RI "#define \fBTOTAL_TIMING\fP(s)   do {    \fBSHOW_TOTAL_TIMING\fP(s, #s); \fBCLEAR_AVERAGE_TIMING\fP(s);     } while (0)"
.br
.ti -1c
.RI "#define \fBscaleValueFI\fP(p, s, maxVal)   \fBscaleValueF\fP(p, s, (float)maxVal)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned char \fBUCHAR\fP"
.br
.ti -1c
.RI "typedef int \fBbool\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBroundFloat\fP (float f)"
.br
.ti -1c
.RI "IplImage * \fBdrawFloatGraph\fP (const float *arraySrc, int nArrayLength, IplImage *imageDst \fBDEFAULT\fP(0), float minV \fBDEFAULT\fP(0\&.0), float maxV \fBDEFAULT\fP(0\&.0), int width \fBDEFAULT\fP(0), int height \fBDEFAULT\fP(0), char *graphLabel \fBDEFAULT\fP(0), \fBbool\fP showScale \fBDEFAULT\fP(\fBtrue\fP))"
.br
.ti -1c
.RI "IplImage * \fBdrawIntGraph\fP (const int *arraySrc, int nArrayLength, IplImage *imageDst \fBDEFAULT\fP(0), int minV \fBDEFAULT\fP(0), int maxV \fBDEFAULT\fP(0), int width \fBDEFAULT\fP(0), int height \fBDEFAULT\fP(0), char *graphLabel \fBDEFAULT\fP(0), \fBbool\fP showScale \fBDEFAULT\fP(\fBtrue\fP))"
.br
.ti -1c
.RI "IplImage * \fBdrawUCharGraph\fP (const uchar *arraySrc, int nArrayLength, IplImage *imageDst \fBDEFAULT\fP(0), int minV \fBDEFAULT\fP(0), int maxV \fBDEFAULT\fP(0), int width \fBDEFAULT\fP(0), int height \fBDEFAULT\fP(0), char *graphLabel \fBDEFAULT\fP(0), \fBbool\fP showScale \fBDEFAULT\fP(\fBtrue\fP))"
.br
.ti -1c
.RI "void \fBshowFloatGraph\fP (const char *name, const float *arraySrc, int nArrayLength, int delay_ms \fBDEFAULT\fP(500), IplImage *background \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBshowIntGraph\fP (const char *name, const int *arraySrc, int nArrayLength, int delay_ms \fBDEFAULT\fP(500), IplImage *background \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBshowUCharGraph\fP (const char *name, const uchar *arraySrc, int nArrayLength, int delay_ms \fBDEFAULT\fP(500), IplImage *background \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBshowImage\fP (const IplImage *img, int delay_ms \fBDEFAULT\fP(0), char *name \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBsetGraphColor\fP (int index \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBsetCustomGraphColor\fP (int R, int B, int G)"
.br
.ti -1c
.RI "IplImage * \fBconvertImageToGreyscale\fP (const IplImage *imageSrc)"
.br
.ti -1c
.RI "IplImage * \fBconvertImageYIQtoRGB\fP (const IplImage *imageYIQ)"
.br
.ti -1c
.RI "IplImage * \fBconvertImageRGBtoYIQ\fP (const IplImage *imageRGB)"
.br
.ti -1c
.RI "IplImage * \fBconvertImageHSVtoRGB\fP (const IplImage *imageHSV)"
.br
.ti -1c
.RI "IplImage * \fBconvertImageRGBtoHSV\fP (const IplImage *imageRGB)"
.br
.ti -1c
.RI "void \fBconvertPixelRGBtoHSV_256\fP (int bR, int bG, int bB, int &bH, int &bS, int &bV)"
.br
.ti -1c
.RI "void \fBconvertPixelHSVtoRGB_256\fP (int bH, int bS, int bV, int &bR, int &bG, int &bB)"
.br
.ti -1c
.RI "void \fBconvertPixelRGBtoHSV_180\fP (int bR, int bG, int bB, int &bH, int &bS, int &bV)"
.br
.ti -1c
.RI "void \fBconvertPixelHSVtoRGB_180\fP (int bH, int bS, int bV, int &bR, int &bG, int &bB)"
.br
.ti -1c
.RI "CvPoint2D32f \fBaddPointF\fP (const CvPoint2D32f pointA, const CvPoint2D32f pointB)"
.br
.ti -1c
.RI "CvPoint2D32f \fBsubtractPointF\fP (const CvPoint2D32f pointA, const CvPoint2D32f pointB)"
.br
.ti -1c
.RI "CvPoint2D32f \fBscalePointF\fP (const CvPoint2D32f point, float scale)"
.br
.ti -1c
.RI "CvPoint2D32f \fBscalePointAroundPointF\fP (const CvPoint2D32f point, const CvPoint2D32f origin, float scale)"
.br
.ti -1c
.RI "float \fBscaleValueF\fP (float p, float s, float maxVal)"
.br
.ti -1c
.RI "int \fBscaleValueI\fP (int p, float s, int maxVal)"
.br
.ti -1c
.RI "CvPoint2D32f \fBrotatePointF\fP (const CvPoint2D32f point, float angleDegrees)"
.br
.ti -1c
.RI "CvPoint2D32f \fBrotatePointAroundPointF\fP (const CvPoint2D32f point, const CvPoint2D32f origin, float angleDegrees)"
.br
.ti -1c
.RI "float \fBfindDistanceBetweenPointsF\fP (const CvPoint2D32f p1, const CvPoint2D32f p2)"
.br
.ti -1c
.RI "float \fBfindDistanceBetweenPointsI\fP (const CvPoint p1, const CvPoint p2)"
.br
.ti -1c
.RI "float \fBfindAngleBetweenPointsF\fP (const CvPoint2D32f p1, const CvPoint2D32f p2)"
.br
.ti -1c
.RI "float \fBfindAngleBetweenPointsI\fP (const CvPoint p1, const CvPoint p2)"
.br
.ti -1c
.RI "void \fBdrawCross\fP (IplImage *img, const CvPoint pt, int radius, const CvScalar color)"
.br
.ti -1c
.RI "void \fBprintPoint\fP (const CvPoint pt, const char *label)"
.br
.ti -1c
.RI "void \fBprintPointF\fP (const CvPoint2D32f pt, const char *label)"
.br
.ti -1c
.RI "CvRect \fBscaleRect\fP (const CvRect rectIn, float scaleX, float scaleY, int w \fBDEFAULT\fP(0), int \fBh\fP \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "CvRect \fBscaleRectInPlace\fP (const CvRect rectIn, float scaleX, float scaleY, float borderX \fBDEFAULT\fP(0\&.0f), float borderY DEFAULT(0\&.0f), int w DEFAULT(0), int h DEFAULT(0))"
.br
.ti -1c
.RI "CvRect \fBoffsetRect\fP (const CvRect rectA, const CvRect rectB)"
.br
.ti -1c
.RI "CvRect \fBoffsetRectPt\fP (const CvRect rectA, const CvPoint pt)"
.br
.ti -1c
.RI "void \fBdrawRect\fP (IplImage *img, const CvRect rect, const CvScalar color \fBDEFAULT\fP(CV_RGB(220, 0, 0)))"
.br
.ti -1c
.RI "void \fBdrawRectFilled\fP (IplImage *img, const CvRect rect, const CvScalar color \fBDEFAULT\fP(CV_RGB(220, 0, 0)))"
.br
.ti -1c
.RI "void \fBprintRect\fP (const CvRect rect, const char *label \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "CvRect \fBcropRect\fP (const CvRect rectIn, int w, int \fBh\fP)"
.br
.ti -1c
.RI "IplImage * \fBcropImage\fP (const IplImage *img, const CvRect region)"
.br
.ti -1c
.RI "IplImage * \fBresizeImage\fP (const IplImage *origImg, int newWidth, int newHeight, \fBbool\fP keepAspectRatio)"
.br
.ti -1c
.RI "IplImage * \fBrotateImage\fP (const IplImage *src, float angleDegrees, float scale \fBDEFAULT\fP(1\&.0f))"
.br
.ti -1c
.RI "CvPoint2D32f \fBmapRotatedImagePoint\fP (const CvPoint2D32f pointOrig, const IplImage *image, float angleRadians, float scale \fBDEFAULT\fP(1\&.0f))"
.br
.ti -1c
.RI "IplImage * \fBcombineImagesResized\fP (int nArgs,\&.\&.\&.)"
.br
.ti -1c
.RI "IplImage * \fBcombineImages\fP (int nArgs,\&.\&.\&.)"
.br
.ti -1c
.RI "IplImage * \fBsmoothImageBilateral\fP (const IplImage *src, float smoothness \fBDEFAULT\fP(30))"
.br
.ti -1c
.RI "IplImage * \fBblendImage\fP (const IplImage *image1, const IplImage *image2, const IplImage *imageAlphaMask)"
.br
.ti -1c
.RI "IplImage * \fBconvertMatrixToUcharImage\fP (const CvMat *srcMat)"
.br
.ti -1c
.RI "IplImage * \fBconvertFloatImageToUcharImage\fP (const IplImage *srcImg)"
.br
.ti -1c
.RI "int \fBsaveImage\fP (const char *filename, const IplImage *image)"
.br
.ti -1c
.RI "void \fBsaveFloatMat\fP (const char *filename, const CvMat *src)"
.br
.ti -1c
.RI "void \fBsaveFloatImage\fP (const char *filename, const IplImage *srcImg)"
.br
.ti -1c
.RI "void \fBdrawText\fP (IplImage *img, CvPoint position, CvScalar color, char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBprintImageInfo\fP (const IplImage *image_tile, const char *label \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBprintImagePixels\fP (const IplImage *image, const char *label \fBDEFAULT\fP(0), int maxElements \fBDEFAULT\fP(300))"
.br
.ti -1c
.RI "void \fBprintMat\fP (const cv::Mat M, const char *label \fBDEFAULT\fP(0), int maxElements \fBDEFAULT\fP(300))"
.br
.ti -1c
.RI "void \fBprintMatrix\fP (const CvMat *M, const char *label \fBDEFAULT\fP(0), int maxElements \fBDEFAULT\fP(300))"
.br
.ti -1c
.RI "void \fBprintMatInfo\fP (const cv::Mat M, const char *label \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBprintPoint32f\fP (const CvPoint2D32f pt, const char *label \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBprintLine\fP (const CvPoint ptA, const CvPoint ptB, const char *label \fBDEFAULT\fP(0))"
.br
.ti -1c
.RI "void \fBprintDataRange\fP (const CvArr *src, const char *msg)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define AVERAGE_TIMING(s)   \fBSHOW_TIMING\fP(s, #s)"

.PP
Definition at line 119 of file ImageUtils\&.h\&.
.SS "#define CLEAR_AVERAGE_TIMING(s)   do {    timeTally_##s = 0; countTally_##s = 0;     } while (0)"

.PP
Definition at line 116 of file ImageUtils\&.h\&.
.SS "#define DECLARE_TIMING(s)   int64 timeStart_##s; int64 timeDiff_##s; int64 timeTally_##s = 0; int64 countTally_##s = 0; double timeMin_##s = DBL_MAX; double timeMax_##s = 0; int64 timeEnd_##s;"

.PP
Definition at line 107 of file ImageUtils\&.h\&.
.SS "#define DEFAULT(val)"

.PP
Definition at line 91 of file ImageUtils\&.h\&.
.SS "#define false   (0)"

.PP
Definition at line 84 of file ImageUtils\&.h\&.
.SS "#define GET_AVERAGE_TIMING(s)   (double)(countTally_##s ? 0\&.001 * ( (double)timeTally_##s / ((double)countTally_##s * cvGetTickFrequency()) ) : 0)"

.PP
Definition at line 113 of file ImageUtils\&.h\&.
.SS "#define GET_MAX_TIMING(s)   (double)(0\&.001 * ( (double)timeMax_##s / (double)cvGetTickFrequency() ))"

.PP
Definition at line 112 of file ImageUtils\&.h\&.
.SS "#define GET_MIN_TIMING(s)   (double)(0\&.001 * ( (double)timeMin_##s / (double)cvGetTickFrequency() ))"

.PP
Definition at line 111 of file ImageUtils\&.h\&.
.SS "#define GET_TIMING(s)   (double)(0\&.001 * ( (double)timeDiff_##s / (double)cvGetTickFrequency() ))"

.PP
Definition at line 110 of file ImageUtils\&.h\&.
.SS "#define GET_TIMING_COUNT(s)   (int)(countTally_##s)"

.PP
Definition at line 115 of file ImageUtils\&.h\&.
.SS "#define GET_TOTAL_TIMING(s)   (double)(0\&.001 * ( (double)timeTally_##s / ((double)cvGetTickFrequency()) ))"

.PP
Definition at line 114 of file ImageUtils\&.h\&.
.SS "#define IMAGEUTILS_0_7_H_"

.PP
Definition at line 20 of file ImageUtils\&.h\&.
.SS "#define LOG(fmt, args\&.\&.\&.)   do {printf(fmt, ## args); printf('\\n'); fflush(stdout);} while (0)"

.PP
Definition at line 57 of file ImageUtils\&.h\&.
.SS "#define scaleValueFI(p, s, maxVal)   \fBscaleValueF\fP(p, s, (float)maxVal)"

.PP
Definition at line 219 of file ImageUtils\&.h\&.
.SS "#define SHOW_TIMING(s, msg)   \fBLOG\fP('%s time:\\t %dms\\t (ave=%dms min=%dms max=%dms, across %d runs)\&.', msg, cvRound(\fBGET_TIMING\fP(s)), cvRound(\fBGET_AVERAGE_TIMING\fP(s)), cvRound(\fBGET_MIN_TIMING\fP(s)), cvRound(\fBGET_MAX_TIMING\fP(s)), \fBGET_TIMING_COUNT\fP(s) )"

.PP
Definition at line 117 of file ImageUtils\&.h\&.
.SS "#define SHOW_TOTAL_TIMING(s, msg)   \fBLOG\fP('%s total:\\t %dms\\t (ave=%dms min=%dms max=%dms, across %d runs)\&.', msg, cvRound(\fBGET_TOTAL_TIMING\fP(s)), cvRound(\fBGET_AVERAGE_TIMING\fP(s)), cvRound(\fBGET_MIN_TIMING\fP(s)), cvRound(\fBGET_MAX_TIMING\fP(s)), \fBGET_TIMING_COUNT\fP(s) )"

.PP
Definition at line 118 of file ImageUtils\&.h\&.
.SS "#define START_TIMING(s)   timeStart_##s = cvGetTickCount()"

.PP
Definition at line 108 of file ImageUtils\&.h\&.
.SS "#define STOP_TIMING(s)   do {    timeEnd_##s = cvGetTickCount(); timeDiff_##s = (timeEnd_##s - timeStart_##s); timeTally_##s += timeDiff_##s; countTally_##s++; timeMin_##s = MIN(timeMin_##s, timeDiff_##s); timeMax_##s = MAX(timeMax_##s, timeDiff_##s);    } while (0)"

.PP
Definition at line 109 of file ImageUtils\&.h\&.
.SS "#define TOTAL_TIMING(s)   do {    \fBSHOW_TOTAL_TIMING\fP(s, #s); \fBCLEAR_AVERAGE_TIMING\fP(s);     } while (0)"

.PP
Definition at line 120 of file ImageUtils\&.h\&.
.SS "#define true   (1)"

.PP
Definition at line 83 of file ImageUtils\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef int \fBbool\fP"

.PP
Definition at line 82 of file ImageUtils\&.h\&.
.SS "typedef unsigned char \fBUCHAR\fP"

.PP
Definition at line 77 of file ImageUtils\&.h\&.
.SH "Function Documentation"
.PP 
.SS "CvPoint2D32f addPointF (const CvPoint2D32fpointA, const CvPoint2D32fpointB)"

.PP
Definition at line 1205 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* blendImage (const IplImage *image1, const IplImage *image2, const IplImage *imageAlphaMask)"

.PP
Definition at line 1946 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* combineImages (intnArgs, \&.\&.\&.)"

.PP
Definition at line 1841 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* combineImagesResized (intnArgs, \&.\&.\&.)"

.PP
Definition at line 1708 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* convertFloatImageToUcharImage (const IplImage *srcImg)"

.PP
Definition at line 2085 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* convertImageHSVtoRGB (const IplImage *imageHSV)"

.PP
Definition at line 1069 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* convertImageRGBtoHSV (const IplImage *imageRGB)"

.PP
Definition at line 931 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* convertImageRGBtoYIQ (const IplImage *imageRGB)"

.SS "IplImage* convertImageToGreyscale (const IplImage *imageSrc)"

.PP
Definition at line 809 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* convertImageYIQtoRGB (const IplImage *imageYIQ)"

.PP
Definition at line 1128 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* convertMatrixToUcharImage (const CvMat *srcMat)"

.PP
Definition at line 2073 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void convertPixelHSVtoRGB_180 (intbH, intbS, intbV, int &bR, int &bG, int &bB)"

.PP
Definition at line 1117 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void convertPixelHSVtoRGB_256 (intbH, intbS, intbV, int &bR, int &bG, int &bB)\fC [inline]\fP"

.PP
Definition at line 970 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void convertPixelRGBtoHSV_180 (intbR, intbG, intbB, int &bH, int &bS, int &bV)"

.PP
Definition at line 1107 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void convertPixelRGBtoHSV_256 (intbR, intbG, intbB, int &bH, int &bS, int &bV)\fC [inline]\fP"

.PP
Definition at line 826 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* cropImage (const IplImage *img, const CvRectregion)"

.PP
Definition at line 1541 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvRect cropRect (const CvRectrectIn, intw, inth)"

.PP
Definition at line 1464 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void drawCross (IplImage *img, const CvPointpt, intradius, const CvScalarcolor)"

.PP
Definition at line 1440 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* drawFloatGraph (const float *arraySrc, intnArrayLength, IplImage *imageDst DEFAULT0, float minV DEFAULT0\&.0, float maxV DEFAULT0\&.0, int width DEFAULT0, int height DEFAULT0, char *graphLabel DEFAULT0, \fBbool\fP showScale DEFAULTtrue)"

.SS "IplImage* drawIntGraph (const int *arraySrc, intnArrayLength, IplImage *imageDst DEFAULT0, int minV DEFAULT0, int maxV DEFAULT0, int width DEFAULT0, int height DEFAULT0, char *graphLabel DEFAULT0, \fBbool\fP showScale DEFAULTtrue)"

.SS "void drawRect (IplImage *img, const CvRectrect, const CvScalar color DEFAULTCV_RGB(220, 0, 0))"

.SS "void drawRectFilled (IplImage *img, const CvRectrect, const CvScalar color DEFAULTCV_RGB(220, 0, 0))"

.SS "void drawText (IplImage *img, CvPointposition, CvScalarcolor, char *fmt, \&.\&.\&.)"

.PP
Definition at line 2134 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* drawUCharGraph (const uchar *arraySrc, intnArrayLength, IplImage *imageDst DEFAULT0, int minV DEFAULT0, int maxV DEFAULT0, int width DEFAULT0, int height DEFAULT0, char *graphLabel DEFAULT0, \fBbool\fP showScale DEFAULTtrue)"

.SS "float findAngleBetweenPointsF (const CvPoint2D32fp1, const CvPoint2D32fp2)"

.PP
Definition at line 1305 of file ImageUtils_0\&.7\&.cpp\&.
.SS "float findAngleBetweenPointsI (const CvPointp1, const CvPointp2)"

.PP
Definition at line 1315 of file ImageUtils_0\&.7\&.cpp\&.
.SS "float findDistanceBetweenPointsF (const CvPoint2D32fp1, const CvPoint2D32fp2)"

.PP
Definition at line 1289 of file ImageUtils_0\&.7\&.cpp\&.
.SS "float findDistanceBetweenPointsI (const CvPointp1, const CvPointp2)"

.PP
Definition at line 1296 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvPoint2D32f mapRotatedImagePoint (const CvPoint2D32fpointOrig, const IplImage *image, floatangleRadians, float scale DEFAULT1\&.0f)"

.SS "CvRect offsetRect (const CvRectrectA, const CvRectrectB)"

.PP
Definition at line 1397 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvRect offsetRectPt (const CvRectrectA, const CvPointpt)"

.PP
Definition at line 1408 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void printDataRange (const CvArr *src, const char *msg)"

.PP
Definition at line 389 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void printImageInfo (const IplImage *image_tile, const char *label DEFAULT0)"

.SS "void printImagePixels (const IplImage *image, const char *label DEFAULT0, int maxElements DEFAULT300)"

.SS "void printLine (const CvPointptA, const CvPointptB, const char *label DEFAULT0)"

.SS "void printMat (const cv::MatM, const char *label DEFAULT0, int maxElements DEFAULT300)"

.SS "void printMatInfo (const cv::MatM, const char *label DEFAULT0)"

.SS "void printMatrix (const CvMat *M, const char *label DEFAULT0, int maxElements DEFAULT300)"

.SS "void printPoint (const CvPointpt, const char *label)"

.PP
Definition at line 1326 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void printPoint32f (const CvPoint2D32fpt, const char *label DEFAULT0)"

.SS "void printPointF (const CvPoint2D32fpt, const char *label)"

.PP
Definition at line 1334 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void printRect (const CvRectrect, const char *label DEFAULT0)"

.SS "IplImage* resizeImage (const IplImage *origImg, intnewWidth, intnewHeight, \fBbool\fPkeepAspectRatio)"

.PP
Definition at line 1568 of file ImageUtils_0\&.7\&.cpp\&.
.SS "IplImage* rotateImage (const IplImage *src, floatangleDegrees, float scale DEFAULT1\&.0f)"

.SS "CvPoint2D32f rotatePointAroundPointF (const CvPoint2D32fpoint, const CvPoint2D32forigin, floatangleDegrees)"

.PP
Definition at line 1242 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvPoint2D32f rotatePointF (const CvPoint2D32fpoint, floatangleDegrees)"

.PP
Definition at line 1229 of file ImageUtils_0\&.7\&.cpp\&.
.SS "int roundFloat (floatf)\fC [inline]\fP"

.SS "void saveFloatImage (const char *filename, const IplImage *srcImg)"

.PP
Definition at line 2118 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void saveFloatMat (const char *filename, const CvMat *src)"

.PP
Definition at line 2056 of file ImageUtils_0\&.7\&.cpp\&.
.SS "int saveImage (const char *filename, const IplImage *image)"

.PP
Definition at line 2039 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvPoint2D32f scalePointAroundPointF (const CvPoint2D32fpoint, const CvPoint2D32forigin, floatscale)"

.PP
Definition at line 1255 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvPoint2D32f scalePointF (const CvPoint2D32fpoint, floatscale)"

.PP
Definition at line 1221 of file ImageUtils_0\&.7\&.cpp\&.
.SS "CvRect scaleRect (const CvRectrectIn, floatscaleX, floatscaleY, int w DEFAULT0, int \fBh\fP DEFAULT0)"

.SS "CvRect scaleRectInPlace (const CvRectrectIn, floatscaleX, floatscaleY, float borderX DEFAULT0\&.0f, float borderY DEFAULT0\&.0f, int w DEFAULT0, int \fBh\fP DEFAULT0)"

.SS "float scaleValueF (floatp, floats, floatmaxVal)"

.PP
Definition at line 1266 of file ImageUtils_0\&.7\&.cpp\&.
.SS "int scaleValueI (intp, floats, intmaxVal)"

.PP
Definition at line 1277 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void setCustomGraphColor (intR, intB, intG)"

.PP
Definition at line 456 of file ImageUtils_0\&.7\&.cpp\&.
.SS "void setGraphColor (int index DEFAULT0)"

.SS "void showFloatGraph (const char *name, const float *arraySrc, intnArrayLength, int delay_ms DEFAULT500, IplImage *background DEFAULT0)"

.SS "void showImage (const IplImage *img, int delay_ms DEFAULT0, char *name DEFAULT0)"

.SS "void showIntGraph (const char *name, const int *arraySrc, intnArrayLength, int delay_ms DEFAULT500, IplImage *background DEFAULT0)"

.SS "void showUCharGraph (const char *name, const uchar *arraySrc, intnArrayLength, int delay_ms DEFAULT500, IplImage *background DEFAULT0)"

.SS "IplImage* smoothImageBilateral (const IplImage *src, float smoothness DEFAULT30)"

.SS "CvPoint2D32f subtractPointF (const CvPoint2D32fpointA, const CvPoint2D32fpointB)"

.PP
Definition at line 1213 of file ImageUtils_0\&.7\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for iFaceRecognition@YuliWANG from the source code\&.
